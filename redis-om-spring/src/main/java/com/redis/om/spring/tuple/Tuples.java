package com.redis.om.spring.tuple;

import com.redis.om.spring.tuple.impl.Tuple0Impl;
import com.redis.om.spring.tuple.impl.Tuple10Impl;
import com.redis.om.spring.tuple.impl.Tuple11Impl;
import com.redis.om.spring.tuple.impl.Tuple12Impl;
import com.redis.om.spring.tuple.impl.Tuple13Impl;
import com.redis.om.spring.tuple.impl.Tuple14Impl;
import com.redis.om.spring.tuple.impl.Tuple15Impl;
import com.redis.om.spring.tuple.impl.Tuple16Impl;
import com.redis.om.spring.tuple.impl.Tuple17Impl;
import com.redis.om.spring.tuple.impl.Tuple18Impl;
import com.redis.om.spring.tuple.impl.Tuple19Impl;
import com.redis.om.spring.tuple.impl.Tuple1Impl;
import com.redis.om.spring.tuple.impl.Tuple20Impl;
import com.redis.om.spring.tuple.impl.Tuple2Impl;
import com.redis.om.spring.tuple.impl.Tuple3Impl;
import com.redis.om.spring.tuple.impl.Tuple4Impl;
import com.redis.om.spring.tuple.impl.Tuple5Impl;
import com.redis.om.spring.tuple.impl.Tuple6Impl;
import com.redis.om.spring.tuple.impl.Tuple7Impl;
import com.redis.om.spring.tuple.impl.Tuple8Impl;
import com.redis.om.spring.tuple.impl.Tuple9Impl;

/**
 * A collection of static methods to produce different types of {@link Tuple }
 * objects
 * <p>
 * Generated by com.speedment.sources.pattern.tuple.TuplesPattern
 * 
 * @author Per Minborg
 */
public final class Tuples {

  private Tuples() {}

  /**
   * Creates and returns a new {@link EmptyTuple} with the given parameters.
   * 
   * @return a new {@link EmptyTuple} with the given parameters.
   * 
   * @see EmptyTuple
   * @see Tuple
   */
  public static EmptyTuple of() {
    return Tuple0Impl.EMPTY_TUPLE;
  }

  /**
   * Creates and returns a new {@link Single} with the given parameters.
   * 
   * @param <T0> type of element 0
   * @param e0   element 0
   * @return a new {@link Single} with the given parameters.
   * 
   * @see Single
   * @see Tuple
   */
  public static <T0> Single<T0> of(T0 e0) {
    return new Tuple1Impl<>(e0);
  }

  /**
   * Creates and returns a new {@link Tuple2} with the given parameters.
   * 
   * @param <T0> type of element 0
   * @param <T1> type of element 1
   * @param e0   element 0
   * @param e1   element 1
   * @return a new {@link Tuple2} with the given parameters.
   * 
   * @see Tuple2
   * @see Tuple
   */
  public static <T0, T1> Pair<T0, T1> of(T0 e0, T1 e1) {
    return new Tuple2Impl<>(e0, e1);
  }

  /**
   * Creates and returns a new {@link Tuple3} with the given parameters.
   * 
   * @param <T0> type of element 0
   * @param <T1> type of element 1
   * @param <T2> type of element 2
   * @param e0   element 0
   * @param e1   element 1
   * @param e2   element 2
   * @return a new {@link Tuple3} with the given parameters.
   * 
   * @see Tuple3
   * @see Tuple
   */
  public static <T0, T1, T2> Triple<T0, T1, T2> of(T0 e0, T1 e1, T2 e2) {
    return new Tuple3Impl<>(e0, e1, e2);
  }

  /**
   * Creates and returns a new {@link Quad} with the given parameters.
   * 
   * @param <T0> type of element 0
   * @param <T1> type of element 1
   * @param <T2> type of element 2
   * @param <T3> type of element 3
   * @param e0   element 0
   * @param e1   element 1
   * @param e2   element 2
   * @param e3   element 3
   * @return a new {@link Quad} with the given parameters.
   * 
   * @see Quad
   * @see Tuple
   */
  public static <T0, T1, T2, T3> Quad<T0, T1, T2, T3> of(T0 e0, T1 e1, T2 e2, T3 e3) {
    return new Tuple4Impl<>(e0, e1, e2, e3);
  }

  /**
   * Creates and returns a new {@link Quintuple} with the given parameters.
   * 
   * @param <T0> type of element 0
   * @param <T1> type of element 1
   * @param <T2> type of element 2
   * @param <T3> type of element 3
   * @param <T4> type of element 4
   * @param e0   element 0
   * @param e1   element 1
   * @param e2   element 2
   * @param e3   element 3
   * @param e4   element 4
   * @return a new {@link Quintuple} with the given parameters.
   * 
   * @see Quintuple
   * @see Tuple
   */
  public static <T0, T1, T2, T3, T4> Quintuple<T0, T1, T2, T3, T4> of(T0 e0, T1 e1, T2 e2, T3 e3, T4 e4) {
    return new Tuple5Impl<>(e0, e1, e2, e3, e4);
  }

  /**
   * Creates and returns a new {@link Hextuple} with the given parameters.
   * 
   * @param <T0> type of element 0
   * @param <T1> type of element 1
   * @param <T2> type of element 2
   * @param <T3> type of element 3
   * @param <T4> type of element 4
   * @param <T5> type of element 5
   * @param e0   element 0
   * @param e1   element 1
   * @param e2   element 2
   * @param e3   element 3
   * @param e4   element 4
   * @param e5   element 5
   * @return a new {@link Hextuple} with the given parameters.
   * 
   * @see Hextuple
   * @see Tuple
   */
  public static <T0, T1, T2, T3, T4, T5> Hextuple<T0, T1, T2, T3, T4, T5> of(T0 e0, T1 e1, T2 e2, T3 e3, T4 e4, T5 e5) {
    return new Tuple6Impl<>(e0, e1, e2, e3, e4, e5);
  }

  /**
   * Creates and returns a new {@link Septuple} with the given parameters.
   * 
   * @param <T0> type of element 0
   * @param <T1> type of element 1
   * @param <T2> type of element 2
   * @param <T3> type of element 3
   * @param <T4> type of element 4
   * @param <T5> type of element 5
   * @param <T6> type of element 6
   * @param e0   element 0
   * @param e1   element 1
   * @param e2   element 2
   * @param e3   element 3
   * @param e4   element 4
   * @param e5   element 5
   * @param e6   element 6
   * @return a new {@link Septuple} with the given parameters.
   * 
   * @see Septuple
   * @see Tuple
   */
  public static <T0, T1, T2, T3, T4, T5, T6> Septuple<T0, T1, T2, T3, T4, T5, T6> of(T0 e0, T1 e1, T2 e2, T3 e3, T4 e4,
      T5 e5, T6 e6) {
    return new Tuple7Impl<>(e0, e1, e2, e3, e4, e5, e6);
  }

  /**
   * Creates and returns a new {@link Octuple} with the given parameters.
   * 
   * @param <T0> type of element 0
   * @param <T1> type of element 1
   * @param <T2> type of element 2
   * @param <T3> type of element 3
   * @param <T4> type of element 4
   * @param <T5> type of element 5
   * @param <T6> type of element 6
   * @param <T7> type of element 7
   * @param e0   element 0
   * @param e1   element 1
   * @param e2   element 2
   * @param e3   element 3
   * @param e4   element 4
   * @param e5   element 5
   * @param e6   element 6
   * @param e7   element 7
   * @return a new {@link Octuple} with the given parameters.
   * 
   * @see Octuple
   * @see Tuple
   */
  public static <T0, T1, T2, T3, T4, T5, T6, T7> Octuple<T0, T1, T2, T3, T4, T5, T6, T7> of(T0 e0, T1 e1, T2 e2, T3 e3,
      T4 e4, T5 e5, T6 e6, T7 e7) {
    return new Tuple8Impl<>(e0, e1, e2, e3, e4, e5, e6, e7);
  }

  /**
   * Creates and returns a new {@link Nonuple} with the given parameters.
   * 
   * @param <T0> type of element 0
   * @param <T1> type of element 1
   * @param <T2> type of element 2
   * @param <T3> type of element 3
   * @param <T4> type of element 4
   * @param <T5> type of element 5
   * @param <T6> type of element 6
   * @param <T7> type of element 7
   * @param <T8> type of element 8
   * @param e0   element 0
   * @param e1   element 1
   * @param e2   element 2
   * @param e3   element 3
   * @param e4   element 4
   * @param e5   element 5
   * @param e6   element 6
   * @param e7   element 7
   * @param e8   element 8
   * @return a new {@link Nonuple} with the given parameters.
   * 
   * @see Nonuple
   * @see Tuple
   */
  public static <T0, T1, T2, T3, T4, T5, T6, T7, T8> Nonuple<T0, T1, T2, T3, T4, T5, T6, T7, T8> of(T0 e0, T1 e1, T2 e2,
      T3 e3, T4 e4, T5 e5, T6 e6, T7 e7, T8 e8) {
    return new Tuple9Impl<>(e0, e1, e2, e3, e4, e5, e6, e7, e8);
  }

  /**
   * Creates and returns a new {@link Decuple} with the given parameters.
   * 
   * @param <T0> type of element 0
   * @param <T1> type of element 1
   * @param <T2> type of element 2
   * @param <T3> type of element 3
   * @param <T4> type of element 4
   * @param <T5> type of element 5
   * @param <T6> type of element 6
   * @param <T7> type of element 7
   * @param <T8> type of element 8
   * @param <T9> type of element 9
   * @param e0   element 0
   * @param e1   element 1
   * @param e2   element 2
   * @param e3   element 3
   * @param e4   element 4
   * @param e5   element 5
   * @param e6   element 6
   * @param e7   element 7
   * @param e8   element 8
   * @param e9   element 9
   * @return a new {@link Decuple} with the given parameters.
   * 
   * @see Decuple
   * @see Tuple
   */
  public static <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> Decuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> of(T0 e0,
      T1 e1, T2 e2, T3 e3, T4 e4, T5 e5, T6 e6, T7 e7, T8 e8, T9 e9) {
    return new Tuple10Impl<>(e0, e1, e2, e3, e4, e5, e6, e7, e8, e9);
  }

  /**
   * Creates and returns a new {@link Undecuple} with the given parameters.
   * 
   * @param <T0>  type of element 0
   * @param <T1>  type of element 1
   * @param <T2>  type of element 2
   * @param <T3>  type of element 3
   * @param <T4>  type of element 4
   * @param <T5>  type of element 5
   * @param <T6>  type of element 6
   * @param <T7>  type of element 7
   * @param <T8>  type of element 8
   * @param <T9>  type of element 9
   * @param <T10> type of element 10
   * @param e0    element 0
   * @param e1    element 1
   * @param e2    element 2
   * @param e3    element 3
   * @param e4    element 4
   * @param e5    element 5
   * @param e6    element 6
   * @param e7    element 7
   * @param e8    element 8
   * @param e9    element 9
   * @param e10   element 10
   * @return a new {@link Undecuple} with the given parameters.
   * 
   * @see Undecuple
   * @see Tuple
   */
  public static <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Undecuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> of(
      T0 e0, T1 e1, T2 e2, T3 e3, T4 e4, T5 e5, T6 e6, T7 e7, T8 e8, T9 e9, T10 e10) {
    return new Tuple11Impl<>(e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10);
  }

  /**
   * Creates and returns a new {@link Duodecuple} with the given parameters.
   * 
   * @param <T0>  type of element 0
   * @param <T1>  type of element 1
   * @param <T2>  type of element 2
   * @param <T3>  type of element 3
   * @param <T4>  type of element 4
   * @param <T5>  type of element 5
   * @param <T6>  type of element 6
   * @param <T7>  type of element 7
   * @param <T8>  type of element 8
   * @param <T9>  type of element 9
   * @param <T10> type of element 10
   * @param <T11> type of element 11
   * @param e0    element 0
   * @param e1    element 1
   * @param e2    element 2
   * @param e3    element 3
   * @param e4    element 4
   * @param e5    element 5
   * @param e6    element 6
   * @param e7    element 7
   * @param e8    element 8
   * @param e9    element 9
   * @param e10   element 10
   * @param e11   element 11
   * @return a new {@link Duodecuple} with the given parameters.
   * 
   * @see Duodecuple
   * @see Tuple
   */
  public static <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Duodecuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> of(
      T0 e0, T1 e1, T2 e2, T3 e3, T4 e4, T5 e5, T6 e6, T7 e7, T8 e8, T9 e9, T10 e10, T11 e11) {
    return new Tuple12Impl<>(e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11);
  }

  /**
   * Creates and returns a new {@link Tredecuple} with the given parameters.
   * 
   * @param <T0>  type of element 0
   * @param <T1>  type of element 1
   * @param <T2>  type of element 2
   * @param <T3>  type of element 3
   * @param <T4>  type of element 4
   * @param <T5>  type of element 5
   * @param <T6>  type of element 6
   * @param <T7>  type of element 7
   * @param <T8>  type of element 8
   * @param <T9>  type of element 9
   * @param <T10> type of element 10
   * @param <T11> type of element 11
   * @param <T12> type of element 12
   * @param e0    element 0
   * @param e1    element 1
   * @param e2    element 2
   * @param e3    element 3
   * @param e4    element 4
   * @param e5    element 5
   * @param e6    element 6
   * @param e7    element 7
   * @param e8    element 8
   * @param e9    element 9
   * @param e10   element 10
   * @param e11   element 11
   * @param e12   element 12
   * @return a new {@link Tredecuple} with the given parameters.
   * 
   * @see Tredecuple
   * @see Tuple
   */
  public static <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Tredecuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> of(
      T0 e0, T1 e1, T2 e2, T3 e3, T4 e4, T5 e5, T6 e6, T7 e7, T8 e8, T9 e9, T10 e10, T11 e11, T12 e12) {
    return new Tuple13Impl<>(e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12);
  }

  /**
   * Creates and returns a new {@link Quattuordecuple} with the given parameters.
   * 
   * @param <T0>  type of element 0
   * @param <T1>  type of element 1
   * @param <T2>  type of element 2
   * @param <T3>  type of element 3
   * @param <T4>  type of element 4
   * @param <T5>  type of element 5
   * @param <T6>  type of element 6
   * @param <T7>  type of element 7
   * @param <T8>  type of element 8
   * @param <T9>  type of element 9
   * @param <T10> type of element 10
   * @param <T11> type of element 11
   * @param <T12> type of element 12
   * @param <T13> type of element 13
   * @param e0    element 0
   * @param e1    element 1
   * @param e2    element 2
   * @param e3    element 3
   * @param e4    element 4
   * @param e5    element 5
   * @param e6    element 6
   * @param e7    element 7
   * @param e8    element 8
   * @param e9    element 9
   * @param e10   element 10
   * @param e11   element 11
   * @param e12   element 12
   * @param e13   element 13
   * @return a new {@link Quattuordecuple} with the given parameters.
   * 
   * @see Quattuordecuple
   * @see Tuple
   */
  public static <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Quattuordecuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> of(
      T0 e0, T1 e1, T2 e2, T3 e3, T4 e4, T5 e5, T6 e6, T7 e7, T8 e8, T9 e9, T10 e10, T11 e11, T12 e12, T13 e13) {
    return new Tuple14Impl<>(e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13);
  }

  /**
   * Creates and returns a new {@link Quindecuple} with the given parameters.
   * 
   * @param <T0>  type of element 0
   * @param <T1>  type of element 1
   * @param <T2>  type of element 2
   * @param <T3>  type of element 3
   * @param <T4>  type of element 4
   * @param <T5>  type of element 5
   * @param <T6>  type of element 6
   * @param <T7>  type of element 7
   * @param <T8>  type of element 8
   * @param <T9>  type of element 9
   * @param <T10> type of element 10
   * @param <T11> type of element 11
   * @param <T12> type of element 12
   * @param <T13> type of element 13
   * @param <T14> type of element 14
   * @param e0    element 0
   * @param e1    element 1
   * @param e2    element 2
   * @param e3    element 3
   * @param e4    element 4
   * @param e5    element 5
   * @param e6    element 6
   * @param e7    element 7
   * @param e8    element 8
   * @param e9    element 9
   * @param e10   element 10
   * @param e11   element 11
   * @param e12   element 12
   * @param e13   element 13
   * @param e14   element 14
   * @return a new {@link Quindecuple} with the given parameters.
   * 
   * @see Quindecuple
   * @see Tuple
   */
  public static <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Quindecuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> of(
      T0 e0, T1 e1, T2 e2, T3 e3, T4 e4, T5 e5, T6 e6, T7 e7, T8 e8, T9 e9, T10 e10, T11 e11, T12 e12, T13 e13,
      T14 e14) {
    return new Tuple15Impl<>(e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14);
  }

  /**
   * Creates and returns a new {@link Sexdecuple} with the given parameters.
   * 
   * @param <T0>  type of element 0
   * @param <T1>  type of element 1
   * @param <T2>  type of element 2
   * @param <T3>  type of element 3
   * @param <T4>  type of element 4
   * @param <T5>  type of element 5
   * @param <T6>  type of element 6
   * @param <T7>  type of element 7
   * @param <T8>  type of element 8
   * @param <T9>  type of element 9
   * @param <T10> type of element 10
   * @param <T11> type of element 11
   * @param <T12> type of element 12
   * @param <T13> type of element 13
   * @param <T14> type of element 14
   * @param <T15> type of element 15
   * @param e0    element 0
   * @param e1    element 1
   * @param e2    element 2
   * @param e3    element 3
   * @param e4    element 4
   * @param e5    element 5
   * @param e6    element 6
   * @param e7    element 7
   * @param e8    element 8
   * @param e9    element 9
   * @param e10   element 10
   * @param e11   element 11
   * @param e12   element 12
   * @param e13   element 13
   * @param e14   element 14
   * @param e15   element 15
   * @return a new {@link Sexdecuple} with the given parameters.
   * 
   * @see Sexdecuple
   * @see Tuple
   */
  public static <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> Sexdecuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> of(
      T0 e0, T1 e1, T2 e2, T3 e3, T4 e4, T5 e5, T6 e6, T7 e7, T8 e8, T9 e9, T10 e10, T11 e11, T12 e12, T13 e13, T14 e14,
      T15 e15) {
    return new Tuple16Impl<>(e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15);
  }

  /**
   * Creates and returns a new {@link Septendecuple} with the given parameters.
   * 
   * @param <T0>  type of element 0
   * @param <T1>  type of element 1
   * @param <T2>  type of element 2
   * @param <T3>  type of element 3
   * @param <T4>  type of element 4
   * @param <T5>  type of element 5
   * @param <T6>  type of element 6
   * @param <T7>  type of element 7
   * @param <T8>  type of element 8
   * @param <T9>  type of element 9
   * @param <T10> type of element 10
   * @param <T11> type of element 11
   * @param <T12> type of element 12
   * @param <T13> type of element 13
   * @param <T14> type of element 14
   * @param <T15> type of element 15
   * @param <T16> type of element 16
   * @param e0    element 0
   * @param e1    element 1
   * @param e2    element 2
   * @param e3    element 3
   * @param e4    element 4
   * @param e5    element 5
   * @param e6    element 6
   * @param e7    element 7
   * @param e8    element 8
   * @param e9    element 9
   * @param e10   element 10
   * @param e11   element 11
   * @param e12   element 12
   * @param e13   element 13
   * @param e14   element 14
   * @param e15   element 15
   * @param e16   element 16
   * @return a new {@link Septendecuple} with the given parameters.
   * 
   * @see Septendecuple
   * @see Tuple
   */
  public static <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> Septendecuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> of(
      T0 e0, T1 e1, T2 e2, T3 e3, T4 e4, T5 e5, T6 e6, T7 e7, T8 e8, T9 e9, T10 e10, T11 e11, T12 e12, T13 e13, T14 e14,
      T15 e15, T16 e16) {
    return new Tuple17Impl<>(e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16);
  }

  /**
   * Creates and returns a new {@link Octodecuple} with the given parameters.
   * 
   * @param <T0>  type of element 0
   * @param <T1>  type of element 1
   * @param <T2>  type of element 2
   * @param <T3>  type of element 3
   * @param <T4>  type of element 4
   * @param <T5>  type of element 5
   * @param <T6>  type of element 6
   * @param <T7>  type of element 7
   * @param <T8>  type of element 8
   * @param <T9>  type of element 9
   * @param <T10> type of element 10
   * @param <T11> type of element 11
   * @param <T12> type of element 12
   * @param <T13> type of element 13
   * @param <T14> type of element 14
   * @param <T15> type of element 15
   * @param <T16> type of element 16
   * @param <T17> type of element 17
   * @param e0    element 0
   * @param e1    element 1
   * @param e2    element 2
   * @param e3    element 3
   * @param e4    element 4
   * @param e5    element 5
   * @param e6    element 6
   * @param e7    element 7
   * @param e8    element 8
   * @param e9    element 9
   * @param e10   element 10
   * @param e11   element 11
   * @param e12   element 12
   * @param e13   element 13
   * @param e14   element 14
   * @param e15   element 15
   * @param e16   element 16
   * @param e17   element 17
   * @return a new {@link Octodecuple} with the given parameters.
   * 
   * @see Octodecuple
   * @see Tuple
   */
  public static <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> Octodecuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> of(
      T0 e0, T1 e1, T2 e2, T3 e3, T4 e4, T5 e5, T6 e6, T7 e7, T8 e8, T9 e9, T10 e10, T11 e11, T12 e12, T13 e13, T14 e14,
      T15 e15, T16 e16, T17 e17) {
    return new Tuple18Impl<>(e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17);
  }

  /**
   * Creates and returns a new {@link Novemdecuple} with the given parameters.
   * 
   * @param <T0>  type of element 0
   * @param <T1>  type of element 1
   * @param <T2>  type of element 2
   * @param <T3>  type of element 3
   * @param <T4>  type of element 4
   * @param <T5>  type of element 5
   * @param <T6>  type of element 6
   * @param <T7>  type of element 7
   * @param <T8>  type of element 8
   * @param <T9>  type of element 9
   * @param <T10> type of element 10
   * @param <T11> type of element 11
   * @param <T12> type of element 12
   * @param <T13> type of element 13
   * @param <T14> type of element 14
   * @param <T15> type of element 15
   * @param <T16> type of element 16
   * @param <T17> type of element 17
   * @param <T18> type of element 18
   * @param e0    element 0
   * @param e1    element 1
   * @param e2    element 2
   * @param e3    element 3
   * @param e4    element 4
   * @param e5    element 5
   * @param e6    element 6
   * @param e7    element 7
   * @param e8    element 8
   * @param e9    element 9
   * @param e10   element 10
   * @param e11   element 11
   * @param e12   element 12
   * @param e13   element 13
   * @param e14   element 14
   * @param e15   element 15
   * @param e16   element 16
   * @param e17   element 17
   * @param e18   element 18
   * @return a new {@link Novemdecuple} with the given parameters.
   * 
   * @see Novemdecuple
   * @see Tuple
   */
  public static <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> Novemdecuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> of(
      T0 e0, T1 e1, T2 e2, T3 e3, T4 e4, T5 e5, T6 e6, T7 e7, T8 e8, T9 e9, T10 e10, T11 e11, T12 e12, T13 e13, T14 e14,
      T15 e15, T16 e16, T17 e17, T18 e18) {
    return new Tuple19Impl<>(e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18);
  }

  /**
   * Creates and returns a new {@link Vigintuple} with the given parameters.
   * 
   * @param <T0>  type of element 0
   * @param <T1>  type of element 1
   * @param <T2>  type of element 2
   * @param <T3>  type of element 3
   * @param <T4>  type of element 4
   * @param <T5>  type of element 5
   * @param <T6>  type of element 6
   * @param <T7>  type of element 7
   * @param <T8>  type of element 8
   * @param <T9>  type of element 9
   * @param <T10> type of element 10
   * @param <T11> type of element 11
   * @param <T12> type of element 12
   * @param <T13> type of element 13
   * @param <T14> type of element 14
   * @param <T15> type of element 15
   * @param <T16> type of element 16
   * @param <T17> type of element 17
   * @param <T18> type of element 18
   * @param <T19> type of element 19
   * @param e0    element 0
   * @param e1    element 1
   * @param e2    element 2
   * @param e3    element 3
   * @param e4    element 4
   * @param e5    element 5
   * @param e6    element 6
   * @param e7    element 7
   * @param e8    element 8
   * @param e9    element 9
   * @param e10   element 10
   * @param e11   element 11
   * @param e12   element 12
   * @param e13   element 13
   * @param e14   element 14
   * @param e15   element 15
   * @param e16   element 16
   * @param e17   element 17
   * @param e18   element 18
   * @param e19   element 19
   * @return a new {@link Vigintuple} with the given parameters.
   * 
   * @see Vigintuple
   * @see Tuple
   */
  public static <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> Vigintuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> of(
      T0 e0, T1 e1, T2 e2, T3 e3, T4 e4, T5 e5, T6 e6, T7 e7, T8 e8, T9 e9, T10 e10, T11 e11, T12 e12, T13 e13, T14 e14,
      T15 e15, T16 e16, T17 e17, T18 e18, T19 e19) {
    return new Tuple20Impl<>(e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19);
  }

  /**
   * Creates and returns a {@link Tuple} with the given parameters
   * 
   * @param el array of elements to use for the Tuple
   * @return a {@link Tuple} with the given parameters
   * 
   * @see Tuple
   */
  @SafeVarargs
  public static Tuple ofArray(Object... el) {
    switch (el.length) {
      case 0:
        return of();
      case 1:
        return of(el[0]);
      case 2:
        return of(el[0], el[1]);
      case 3:
        return of(el[0], el[1], el[2]);
      case 4:
        return of(el[0], el[1], el[2], el[3]);
      case 5:
        return of(el[0], el[1], el[2], el[3], el[4]);
      case 6:
        return of(el[0], el[1], el[2], el[3], el[4], el[5]);
      case 7:
        return of(el[0], el[1], el[2], el[3], el[4], el[5], el[6]);
      case 8:
        return of(el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7]);
      case 9:
        return of(el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8]);
      case 10:
        return of(el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9]);
      case 11:
        return of(el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10]);
      case 12:
        return of(el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10], el[11]);
      case 13:
        return of(el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10], el[11], el[12]);
      case 14:
        return of(el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10], el[11], el[12], el[13]);
      case 15:
        return of(el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10], el[11], el[12], el[13],
            el[14]);
      case 16:
        return of(el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10], el[11], el[12], el[13],
            el[14], el[15]);
      case 17:
        return of(el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10], el[11], el[12], el[13],
            el[14], el[15], el[16]);
      case 18:
        return of(el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10], el[11], el[12], el[13],
            el[14], el[15], el[16], el[17]);
      case 19:
        return of(el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10], el[11], el[12], el[13],
            el[14], el[15], el[16], el[17], el[18]);
      case 20:
        return of(el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10], el[11], el[12], el[13],
            el[14], el[15], el[16], el[17], el[18], el[19]);
      default:
        return new TupleInfiniteDegreeImpl(el);
    }
  }
}
