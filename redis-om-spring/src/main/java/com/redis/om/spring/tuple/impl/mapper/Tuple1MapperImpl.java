
package com.redis.om.spring.tuple.impl.mapper;

import java.util.function.Function;

import com.redis.om.spring.tuple.AbstractTupleMapper;
import com.redis.om.spring.tuple.Single;
import com.redis.om.spring.tuple.TupleMapper;
import com.redis.om.spring.tuple.Tuples;

/**
 * An implementation class of a {@link TupleMapper } of degree 1
 * <p>
 * Generated by com.speedment.sources.pattern.tuple.TupleMapperImplPattern
 *
 * @param <T>  Type of the original object for the mapper to use when creating a
 *             {@code Tuple }
 * @param <T0> type of element 0
 */
public final class Tuple1MapperImpl<T, T0>
extends AbstractTupleMapper<T, Single<T0>>
implements TupleMapper<T, Single<T0>> {

    /**
     * Constructs a {@link TupleMapper } that can create {@link Single }.
     *
     * @param m0 mapper to apply for element 0
     */
    public Tuple1MapperImpl(Function<T, T0> m0) {
        super(1);
        set(0, m0);
    }

    @Override
    public Single<T0> apply(T t) {
        return Tuples.of(
            get0().apply(t)
        );
    }

    public Function<T, T0> get0() {
        return getAndCast(0);
    }
}