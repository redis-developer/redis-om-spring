
package com.redis.om.spring.tuple;

import java.util.function.Function;

import com.redis.om.spring.tuple.impl.mapper.Tuple0MapperImpl;
import com.redis.om.spring.tuple.impl.mapper.Tuple10MapperImpl;
import com.redis.om.spring.tuple.impl.mapper.Tuple11MapperImpl;
import com.redis.om.spring.tuple.impl.mapper.Tuple12MapperImpl;
import com.redis.om.spring.tuple.impl.mapper.Tuple13MapperImpl;
import com.redis.om.spring.tuple.impl.mapper.Tuple14MapperImpl;
import com.redis.om.spring.tuple.impl.mapper.Tuple15MapperImpl;
import com.redis.om.spring.tuple.impl.mapper.Tuple16MapperImpl;
import com.redis.om.spring.tuple.impl.mapper.Tuple17MapperImpl;
import com.redis.om.spring.tuple.impl.mapper.Tuple18MapperImpl;
import com.redis.om.spring.tuple.impl.mapper.Tuple19MapperImpl;
import com.redis.om.spring.tuple.impl.mapper.Tuple1MapperImpl;
import com.redis.om.spring.tuple.impl.mapper.Tuple20MapperImpl;
import com.redis.om.spring.tuple.impl.mapper.Tuple2MapperImpl;
import com.redis.om.spring.tuple.impl.mapper.Tuple3MapperImpl;
import com.redis.om.spring.tuple.impl.mapper.Tuple4MapperImpl;
import com.redis.om.spring.tuple.impl.mapper.Tuple5MapperImpl;
import com.redis.om.spring.tuple.impl.mapper.Tuple6MapperImpl;
import com.redis.om.spring.tuple.impl.mapper.Tuple7MapperImpl;
import com.redis.om.spring.tuple.impl.mapper.Tuple8MapperImpl;
import com.redis.om.spring.tuple.impl.mapper.Tuple9MapperImpl;

/**
 * A collection of static methods to produce different types of {@link Tuple }
 * objects
 * <p>
 * Generated by com.speedment.sources.pattern.tuple.TuplesPattern
 */
public final class Fields {

  private Fields() {}

  /**
   * Creates and returns a Function that, when applied, creates a
   * {@link EmptyTuple} from an initial object of type T by applying the given
   * mappers.
   *
   * @param <T> type of the initial object to be used by the function to create a
   *            {@link EmptyTuple }
   * @return a Function that, when applied, creates a {@link EmptyTuple} from an
   *         initial object of type T by applying the given mappers.
   *
   * @see EmptyTuple
   * @see Tuple
   */
  @SuppressWarnings("unchecked")
  public static <T> Function<T, EmptyTuple> toTuple() {
    return (Function<T, EmptyTuple>) Tuple0MapperImpl.EMPTY_MAPPER;
  }

  /**
   * Creates and returns a Function that, when applied, creates a {@link Single}
   * from an initial object of type T by applying the given mappers.
   *
   * @param <T>  type of the initial object to be used by the function to create a
   *             {@link Single }
   * @param <T0> target type of m0
   * @param m0   mapper to apply for Tuple1's element 0
   * @return a Function that, when applied, creates a {@link Single} from an
   *         initial object of type T by applying the given mappers.
   *
   * @see Single
   * @see Tuple
   */
  public static <T, T0> Function<T, Single<T0>> toTuple(Function<T, T0> m0) {
    return new Tuple1MapperImpl<>(m0);
  }

  /**
   * Creates and returns a Function that, when applied, creates a {@link Pair}
   * from an initial object of type T by applying the given mappers.
   *
   * @param <T>  type of the initial object to be used by the function to create a
   *             {@link Pair }
   * @param <T0> target type of m0
   * @param <T1> target type of m1
   * @param m0   mapper to apply for Tuple2's element 0
   * @param m1   mapper to apply for Tuple2's element 1
   * @return a Function that, when applied, creates a {@link Pair} from an initial
   *         object of type T by applying the given mappers.
   *
   * @see Pair
   * @see Tuple
   */
  public static <T, T0, T1> Function<T, Pair<T0, T1>> of(Function<T, T0> m0, Function<T, T1> m1) {
    return new Tuple2MapperImpl<>(m0, m1);
  }

  /**
   * Creates and returns a Function that, when applied, creates a {@link Triple}
   * from an initial object of type T by applying the given mappers.
   *
   * @param <T>  type of the initial object to be used by the function to create a
   *             {@link Triple }
   * @param <T0> target type of m0
   * @param <T1> target type of m1
   * @param <T2> target type of m2
   * @param m0   mapper to apply for Tuple3's element 0
   * @param m1   mapper to apply for Tuple3's element 1
   * @param m2   mapper to apply for Tuple3's element 2
   * @return a Function that, when applied, creates a {@link Triple} from an
   *         initial object of type T by applying the given mappers.
   *
   * @see Triple
   * @see Tuple
   */
  public static <T, T0, T1, T2> Function<T, Triple<T0, T1, T2>> of(Function<T, T0> m0, Function<T, T1> m1,
      Function<T, T2> m2) {
    return new Tuple3MapperImpl<>(m0, m1, m2);
  }

  /**
   * Creates and returns a Function that, when applied, creates a {@link Quad}
   * from an initial object of type T by applying the given mappers.
   *
   * @param <T>  type of the initial object to be used by the function to create a
   *             {@link Quad }
   * @param <T0> target type of m0
   * @param <T1> target type of m1
   * @param <T2> target type of m2
   * @param <T3> target type of m3
   * @param m0   mapper to apply for Tuple4's element 0
   * @param m1   mapper to apply for Tuple4's element 1
   * @param m2   mapper to apply for Tuple4's element 2
   * @param m3   mapper to apply for Tuple4's element 3
   * @return a Function that, when applied, creates a {@link Quad} from an initial
   *         object of type T by applying the given mappers.
   *
   * @see Quad
   * @see Tuple
   */
  public static <T, T0, T1, T2, T3> Function<T, Quad<T0, T1, T2, T3>> of(Function<T, T0> m0, Function<T, T1> m1,
      Function<T, T2> m2, Function<T, T3> m3) {
    return new Tuple4MapperImpl<>(m0, m1, m2, m3);
  }

  /**
   * Creates and returns a Function that, when applied, creates a
   * {@link Quintuple} from an initial object of type T by applying the given
   * mappers.
   *
   * @param <T>  type of the initial object to be used by the function to create a
   *             {@link Quintuple }
   * @param <T0> target type of m0
   * @param <T1> target type of m1
   * @param <T2> target type of m2
   * @param <T3> target type of m3
   * @param <T4> target type of m4
   * @param m0   mapper to apply for Tuple5's element 0
   * @param m1   mapper to apply for Tuple5's element 1
   * @param m2   mapper to apply for Tuple5's element 2
   * @param m3   mapper to apply for Tuple5's element 3
   * @param m4   mapper to apply for Tuple5's element 4
   * @return a Function that, when applied, creates a {@link Quintuple} from an
   *         initial object of type T by applying the given mappers.
   *
   * @see Quintuple
   * @see Tuple
   */
  public static <T, T0, T1, T2, T3, T4> Function<T, Quintuple<T0, T1, T2, T3, T4>> toTuple(Function<T, T0> m0,
      Function<T, T1> m1, Function<T, T2> m2, Function<T, T3> m3, Function<T, T4> m4) {
    return new Tuple5MapperImpl<>(m0, m1, m2, m3, m4);
  }

  /**
   * Creates and returns a Function that, when applied, creates a {@link Hextuple}
   * from an initial object of type T by applying the given mappers.
   *
   * @param <T>  type of the initial object to be used by the function to create a
   *             {@link Hextuple }
   * @param <T0> target type of m0
   * @param <T1> target type of m1
   * @param <T2> target type of m2
   * @param <T3> target type of m3
   * @param <T4> target type of m4
   * @param <T5> target type of m5
   * @param m0   mapper to apply for Tuple6's element 0
   * @param m1   mapper to apply for Tuple6's element 1
   * @param m2   mapper to apply for Tuple6's element 2
   * @param m3   mapper to apply for Tuple6's element 3
   * @param m4   mapper to apply for Tuple6's element 4
   * @param m5   mapper to apply for Tuple6's element 5
   * @return a Function that, when applied, creates a {@link Hextuple} from an
   *         initial object of type T by applying the given mappers.
   *
   * @see Hextuple
   * @see Tuple
   */
  public static <T, T0, T1, T2, T3, T4, T5> Function<T, Hextuple<T0, T1, T2, T3, T4, T5>> toTuple(Function<T, T0> m0,
      Function<T, T1> m1, Function<T, T2> m2, Function<T, T3> m3, Function<T, T4> m4, Function<T, T5> m5) {
    return new Tuple6MapperImpl<>(m0, m1, m2, m3, m4, m5);
  }

  /**
   * Creates and returns a Function that, when applied, creates a {@link Septuple}
   * from an initial object of type T by applying the given mappers.
   *
   * @param <T>  type of the initial object to be used by the function to create a
   *             {@link Septuple }
   * @param <T0> target type of m0
   * @param <T1> target type of m1
   * @param <T2> target type of m2
   * @param <T3> target type of m3
   * @param <T4> target type of m4
   * @param <T5> target type of m5
   * @param <T6> target type of m6
   * @param m0   mapper to apply for Tuple7's element 0
   * @param m1   mapper to apply for Tuple7's element 1
   * @param m2   mapper to apply for Tuple7's element 2
   * @param m3   mapper to apply for Tuple7's element 3
   * @param m4   mapper to apply for Tuple7's element 4
   * @param m5   mapper to apply for Tuple7's element 5
   * @param m6   mapper to apply for Tuple7's element 6
   * @return a Function that, when applied, creates a {@link Septuple} from an
   *         initial object of type T by applying the given mappers.
   *
   * @see Septuple
   * @see Tuple
   */
  public static <T, T0, T1, T2, T3, T4, T5, T6> Function<T, Septuple<T0, T1, T2, T3, T4, T5, T6>> toTuple(
      Function<T, T0> m0, Function<T, T1> m1, Function<T, T2> m2, Function<T, T3> m3, Function<T, T4> m4,
      Function<T, T5> m5, Function<T, T6> m6) {
    return new Tuple7MapperImpl<>(m0, m1, m2, m3, m4, m5, m6);
  }

  /**
   * Creates and returns a Function that, when applied, creates a {@link Octuple}
   * from an initial object of type T by applying the given mappers.
   *
   * @param <T>  type of the initial object to be used by the function to create a
   *             {@link Octuple }
   * @param <T0> target type of m0
   * @param <T1> target type of m1
   * @param <T2> target type of m2
   * @param <T3> target type of m3
   * @param <T4> target type of m4
   * @param <T5> target type of m5
   * @param <T6> target type of m6
   * @param <T7> target type of m7
   * @param m0   mapper to apply for Tuple8's element 0
   * @param m1   mapper to apply for Tuple8's element 1
   * @param m2   mapper to apply for Tuple8's element 2
   * @param m3   mapper to apply for Tuple8's element 3
   * @param m4   mapper to apply for Tuple8's element 4
   * @param m5   mapper to apply for Tuple8's element 5
   * @param m6   mapper to apply for Tuple8's element 6
   * @param m7   mapper to apply for Tuple8's element 7
   * @return a Function that, when applied, creates a {@link Octuple} from an
   *         initial object of type T by applying the given mappers.
   *
   * @see Octuple
   * @see Tuple
   */
  public static <T, T0, T1, T2, T3, T4, T5, T6, T7> Function<T, Octuple<T0, T1, T2, T3, T4, T5, T6, T7>> toTuple(
      Function<T, T0> m0, Function<T, T1> m1, Function<T, T2> m2, Function<T, T3> m3, Function<T, T4> m4,
      Function<T, T5> m5, Function<T, T6> m6, Function<T, T7> m7) {
    return new Tuple8MapperImpl<>(m0, m1, m2, m3, m4, m5, m6, m7);
  }

  /**
   * Creates and returns a Function that, when applied, creates a {@link Nonuple}
   * from an initial object of type T by applying the given mappers.
   *
   * @param <T>  type of the initial object to be used by the function to create a
   *             {@link Nonuple }
   * @param <T0> target type of m0
   * @param <T1> target type of m1
   * @param <T2> target type of m2
   * @param <T3> target type of m3
   * @param <T4> target type of m4
   * @param <T5> target type of m5
   * @param <T6> target type of m6
   * @param <T7> target type of m7
   * @param <T8> target type of m8
   * @param m0   mapper to apply for Tuple9's element 0
   * @param m1   mapper to apply for Tuple9's element 1
   * @param m2   mapper to apply for Tuple9's element 2
   * @param m3   mapper to apply for Tuple9's element 3
   * @param m4   mapper to apply for Tuple9's element 4
   * @param m5   mapper to apply for Tuple9's element 5
   * @param m6   mapper to apply for Tuple9's element 6
   * @param m7   mapper to apply for Tuple9's element 7
   * @param m8   mapper to apply for Tuple9's element 8
   * @return a Function that, when applied, creates a {@link Nonuple} from an
   *         initial object of type T by applying the given mappers.
   *
   * @see Nonuple
   * @see Tuple
   */
  public static <T, T0, T1, T2, T3, T4, T5, T6, T7, T8> Function<T, Nonuple<T0, T1, T2, T3, T4, T5, T6, T7, T8>> toTuple(
      Function<T, T0> m0, Function<T, T1> m1, Function<T, T2> m2, Function<T, T3> m3, Function<T, T4> m4,
      Function<T, T5> m5, Function<T, T6> m6, Function<T, T7> m7, Function<T, T8> m8) {
    return new Tuple9MapperImpl<>(m0, m1, m2, m3, m4, m5, m6, m7, m8);
  }

  /**
   * Creates and returns a Function that, when applied, creates a {@link Decuple}
   * from an initial object of type T by applying the given mappers.
   *
   * @param <T>  type of the initial object to be used by the function to create a
   *             {@link Decuple }
   * @param <T0> target type of m0
   * @param <T1> target type of m1
   * @param <T2> target type of m2
   * @param <T3> target type of m3
   * @param <T4> target type of m4
   * @param <T5> target type of m5
   * @param <T6> target type of m6
   * @param <T7> target type of m7
   * @param <T8> target type of m8
   * @param <T9> target type of m9
   * @param m0   mapper to apply for Tuple10's element 0
   * @param m1   mapper to apply for Tuple10's element 1
   * @param m2   mapper to apply for Tuple10's element 2
   * @param m3   mapper to apply for Tuple10's element 3
   * @param m4   mapper to apply for Tuple10's element 4
   * @param m5   mapper to apply for Tuple10's element 5
   * @param m6   mapper to apply for Tuple10's element 6
   * @param m7   mapper to apply for Tuple10's element 7
   * @param m8   mapper to apply for Tuple10's element 8
   * @param m9   mapper to apply for Tuple10's element 9
   * @return a Function that, when applied, creates a {@link Decuple} from an
   *         initial object of type T by applying the given mappers.
   *
   * @see Decuple
   * @see Tuple
   */
  public static <T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> Function<T, Decuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> toTuple(
      Function<T, T0> m0, Function<T, T1> m1, Function<T, T2> m2, Function<T, T3> m3, Function<T, T4> m4,
      Function<T, T5> m5, Function<T, T6> m6, Function<T, T7> m7, Function<T, T8> m8, Function<T, T9> m9) {
    return new Tuple10MapperImpl<>(m0, m1, m2, m3, m4, m5, m6, m7, m8, m9);
  }

  /**
   * Creates and returns a Function that, when applied, creates a
   * {@link Undecuple} from an initial object of type T by applying the given
   * mappers.
   *
   * @param <T>   type of the initial object to be used by the function to create
   *              a {@link Undecuple }
   * @param <T0>  target type of m0
   * @param <T1>  target type of m1
   * @param <T2>  target type of m2
   * @param <T3>  target type of m3
   * @param <T4>  target type of m4
   * @param <T5>  target type of m5
   * @param <T6>  target type of m6
   * @param <T7>  target type of m7
   * @param <T8>  target type of m8
   * @param <T9>  target type of m9
   * @param <T10> target type of m10
   * @param m0    mapper to apply for Tuple11's element 0
   * @param m1    mapper to apply for Tuple11's element 1
   * @param m2    mapper to apply for Tuple11's element 2
   * @param m3    mapper to apply for Tuple11's element 3
   * @param m4    mapper to apply for Tuple11's element 4
   * @param m5    mapper to apply for Tuple11's element 5
   * @param m6    mapper to apply for Tuple11's element 6
   * @param m7    mapper to apply for Tuple11's element 7
   * @param m8    mapper to apply for Tuple11's element 8
   * @param m9    mapper to apply for Tuple11's element 9
   * @param m10   mapper to apply for Tuple11's element 10
   * @return a Function that, when applied, creates a {@link Undecuple} from an
   *         initial object of type T by applying the given mappers.
   *
   * @see Undecuple
   * @see Tuple
   */
  public static <T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Function<T, Undecuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> toTuple(
      Function<T, T0> m0, Function<T, T1> m1, Function<T, T2> m2, Function<T, T3> m3, Function<T, T4> m4,
      Function<T, T5> m5, Function<T, T6> m6, Function<T, T7> m7, Function<T, T8> m8, Function<T, T9> m9,
      Function<T, T10> m10) {
    return new Tuple11MapperImpl<>(m0, m1, m2, m3, m4, m5, m6, m7, m8, m9, m10);
  }

  /**
   * Creates and returns a Function that, when applied, creates a
   * {@link Duodecuple} from an initial object of type T by applying the given
   * mappers.
   *
   * @param <T>   type of the initial object to be used by the function to create
   *              a {@link Duodecuple }
   * @param <T0>  target type of m0
   * @param <T1>  target type of m1
   * @param <T2>  target type of m2
   * @param <T3>  target type of m3
   * @param <T4>  target type of m4
   * @param <T5>  target type of m5
   * @param <T6>  target type of m6
   * @param <T7>  target type of m7
   * @param <T8>  target type of m8
   * @param <T9>  target type of m9
   * @param <T10> target type of m10
   * @param <T11> target type of m11
   * @param m0    mapper to apply for Tuple12's element 0
   * @param m1    mapper to apply for Tuple12's element 1
   * @param m2    mapper to apply for Tuple12's element 2
   * @param m3    mapper to apply for Tuple12's element 3
   * @param m4    mapper to apply for Tuple12's element 4
   * @param m5    mapper to apply for Tuple12's element 5
   * @param m6    mapper to apply for Tuple12's element 6
   * @param m7    mapper to apply for Tuple12's element 7
   * @param m8    mapper to apply for Tuple12's element 8
   * @param m9    mapper to apply for Tuple12's element 9
   * @param m10   mapper to apply for Tuple12's element 10
   * @param m11   mapper to apply for Tuple12's element 11
   * @return a Function that, when applied, creates a {@link Duodecuple} from an
   *         initial object of type T by applying the given mappers.
   *
   * @see Duodecuple
   * @see Tuple
   */
  public static <T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Function<T, Duodecuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> toTuple(
      Function<T, T0> m0, Function<T, T1> m1, Function<T, T2> m2, Function<T, T3> m3, Function<T, T4> m4,
      Function<T, T5> m5, Function<T, T6> m6, Function<T, T7> m7, Function<T, T8> m8, Function<T, T9> m9,
      Function<T, T10> m10, Function<T, T11> m11) {
    return new Tuple12MapperImpl<>(m0, m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11);
  }

  /**
   * Creates and returns a Function that, when applied, creates a
   * {@link Tredecuple} from an initial object of type T by applying the given
   * mappers.
   *
   * @param <T>   type of the initial object to be used by the function to create
   *              a {@link Tredecuple }
   * @param <T0>  target type of m0
   * @param <T1>  target type of m1
   * @param <T2>  target type of m2
   * @param <T3>  target type of m3
   * @param <T4>  target type of m4
   * @param <T5>  target type of m5
   * @param <T6>  target type of m6
   * @param <T7>  target type of m7
   * @param <T8>  target type of m8
   * @param <T9>  target type of m9
   * @param <T10> target type of m10
   * @param <T11> target type of m11
   * @param <T12> target type of m12
   * @param m0    mapper to apply for Tuple13's element 0
   * @param m1    mapper to apply for Tuple13's element 1
   * @param m2    mapper to apply for Tuple13's element 2
   * @param m3    mapper to apply for Tuple13's element 3
   * @param m4    mapper to apply for Tuple13's element 4
   * @param m5    mapper to apply for Tuple13's element 5
   * @param m6    mapper to apply for Tuple13's element 6
   * @param m7    mapper to apply for Tuple13's element 7
   * @param m8    mapper to apply for Tuple13's element 8
   * @param m9    mapper to apply for Tuple13's element 9
   * @param m10   mapper to apply for Tuple13's element 10
   * @param m11   mapper to apply for Tuple13's element 11
   * @param m12   mapper to apply for Tuple13's element 12
   * @return a Function that, when applied, creates a {@link Tredecuple} from an
   *         initial object of type T by applying the given mappers.
   *
   * @see Tredecuple
   * @see Tuple
   */
  public static <T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Function<T, Tredecuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> toTuple(
      Function<T, T0> m0, Function<T, T1> m1, Function<T, T2> m2, Function<T, T3> m3, Function<T, T4> m4,
      Function<T, T5> m5, Function<T, T6> m6, Function<T, T7> m7, Function<T, T8> m8, Function<T, T9> m9,
      Function<T, T10> m10, Function<T, T11> m11, Function<T, T12> m12) {
    return new Tuple13MapperImpl<>(m0, m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12);
  }

  /**
   * Creates and returns a Function that, when applied, creates a
   * {@link Quattuordecuple} from an initial object of type T by applying the
   * given mappers.
   *
   * @param <T>   type of the initial object to be used by the function to create
   *              a {@link Quattuordecuple }
   * @param <T0>  target type of m0
   * @param <T1>  target type of m1
   * @param <T2>  target type of m2
   * @param <T3>  target type of m3
   * @param <T4>  target type of m4
   * @param <T5>  target type of m5
   * @param <T6>  target type of m6
   * @param <T7>  target type of m7
   * @param <T8>  target type of m8
   * @param <T9>  target type of m9
   * @param <T10> target type of m10
   * @param <T11> target type of m11
   * @param <T12> target type of m12
   * @param <T13> target type of m13
   * @param m0    mapper to apply for Tuple14's element 0
   * @param m1    mapper to apply for Tuple14's element 1
   * @param m2    mapper to apply for Tuple14's element 2
   * @param m3    mapper to apply for Tuple14's element 3
   * @param m4    mapper to apply for Tuple14's element 4
   * @param m5    mapper to apply for Tuple14's element 5
   * @param m6    mapper to apply for Tuple14's element 6
   * @param m7    mapper to apply for Tuple14's element 7
   * @param m8    mapper to apply for Tuple14's element 8
   * @param m9    mapper to apply for Tuple14's element 9
   * @param m10   mapper to apply for Tuple14's element 10
   * @param m11   mapper to apply for Tuple14's element 11
   * @param m12   mapper to apply for Tuple14's element 12
   * @param m13   mapper to apply for Tuple14's element 13
   * @return a Function that, when applied, creates a {@link Quattuordecuple} from
   *         an initial object of type T by applying the given mappers.
   *
   * @see Quattuordecuple
   * @see Tuple
   */
  public static <T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Function<T, Quattuordecuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> toTuple(
      Function<T, T0> m0, Function<T, T1> m1, Function<T, T2> m2, Function<T, T3> m3, Function<T, T4> m4,
      Function<T, T5> m5, Function<T, T6> m6, Function<T, T7> m7, Function<T, T8> m8, Function<T, T9> m9,
      Function<T, T10> m10, Function<T, T11> m11, Function<T, T12> m12, Function<T, T13> m13) {
    return new Tuple14MapperImpl<>(m0, m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12, m13);
  }

  /**
   * Creates and returns a Function that, when applied, creates a
   * {@link Quindecuple} from an initial object of type T by applying the given
   * mappers.
   *
   * @param <T>   type of the initial object to be used by the function to create
   *              a {@link Quindecuple }
   * @param <T0>  target type of m0
   * @param <T1>  target type of m1
   * @param <T2>  target type of m2
   * @param <T3>  target type of m3
   * @param <T4>  target type of m4
   * @param <T5>  target type of m5
   * @param <T6>  target type of m6
   * @param <T7>  target type of m7
   * @param <T8>  target type of m8
   * @param <T9>  target type of m9
   * @param <T10> target type of m10
   * @param <T11> target type of m11
   * @param <T12> target type of m12
   * @param <T13> target type of m13
   * @param <T14> target type of m14
   * @param m0    mapper to apply for Tuple15's element 0
   * @param m1    mapper to apply for Tuple15's element 1
   * @param m2    mapper to apply for Tuple15's element 2
   * @param m3    mapper to apply for Tuple15's element 3
   * @param m4    mapper to apply for Tuple15's element 4
   * @param m5    mapper to apply for Tuple15's element 5
   * @param m6    mapper to apply for Tuple15's element 6
   * @param m7    mapper to apply for Tuple15's element 7
   * @param m8    mapper to apply for Tuple15's element 8
   * @param m9    mapper to apply for Tuple15's element 9
   * @param m10   mapper to apply for Tuple15's element 10
   * @param m11   mapper to apply for Tuple15's element 11
   * @param m12   mapper to apply for Tuple15's element 12
   * @param m13   mapper to apply for Tuple15's element 13
   * @param m14   mapper to apply for Tuple15's element 14
   * @return a Function that, when applied, creates a {@link Quindecuple} from an
   *         initial object of type T by applying the given mappers.
   *
   * @see Quindecuple
   * @see Tuple
   */
  public static <T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Function<T, Quindecuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> toTuple(
      Function<T, T0> m0, Function<T, T1> m1, Function<T, T2> m2, Function<T, T3> m3, Function<T, T4> m4,
      Function<T, T5> m5, Function<T, T6> m6, Function<T, T7> m7, Function<T, T8> m8, Function<T, T9> m9,
      Function<T, T10> m10, Function<T, T11> m11, Function<T, T12> m12, Function<T, T13> m13, Function<T, T14> m14) {
    return new Tuple15MapperImpl<>(m0, m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12, m13, m14);
  }

  /**
   * Creates and returns a Function that, when applied, creates a
   * {@link Sexdecuple} from an initial object of type T by applying the given
   * mappers.
   *
   * @param <T>   type of the initial object to be used by the function to create
   *              a {@link Sexdecuple }
   * @param <T0>  target type of m0
   * @param <T1>  target type of m1
   * @param <T2>  target type of m2
   * @param <T3>  target type of m3
   * @param <T4>  target type of m4
   * @param <T5>  target type of m5
   * @param <T6>  target type of m6
   * @param <T7>  target type of m7
   * @param <T8>  target type of m8
   * @param <T9>  target type of m9
   * @param <T10> target type of m10
   * @param <T11> target type of m11
   * @param <T12> target type of m12
   * @param <T13> target type of m13
   * @param <T14> target type of m14
   * @param <T15> target type of m15
   * @param m0    mapper to apply for Tuple16's element 0
   * @param m1    mapper to apply for Tuple16's element 1
   * @param m2    mapper to apply for Tuple16's element 2
   * @param m3    mapper to apply for Tuple16's element 3
   * @param m4    mapper to apply for Tuple16's element 4
   * @param m5    mapper to apply for Tuple16's element 5
   * @param m6    mapper to apply for Tuple16's element 6
   * @param m7    mapper to apply for Tuple16's element 7
   * @param m8    mapper to apply for Tuple16's element 8
   * @param m9    mapper to apply for Tuple16's element 9
   * @param m10   mapper to apply for Tuple16's element 10
   * @param m11   mapper to apply for Tuple16's element 11
   * @param m12   mapper to apply for Tuple16's element 12
   * @param m13   mapper to apply for Tuple16's element 13
   * @param m14   mapper to apply for Tuple16's element 14
   * @param m15   mapper to apply for Tuple16's element 15
   * @return a Function that, when applied, creates a {@link Sexdecuple} from an
   *         initial object of type T by applying the given mappers.
   *
   * @see Sexdecuple
   * @see Tuple
   */
  public static <T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> Function<T, Sexdecuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> toTuple(
      Function<T, T0> m0, Function<T, T1> m1, Function<T, T2> m2, Function<T, T3> m3, Function<T, T4> m4,
      Function<T, T5> m5, Function<T, T6> m6, Function<T, T7> m7, Function<T, T8> m8, Function<T, T9> m9,
      Function<T, T10> m10, Function<T, T11> m11, Function<T, T12> m12, Function<T, T13> m13, Function<T, T14> m14,
      Function<T, T15> m15) {
    return new Tuple16MapperImpl<>(m0, m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12, m13, m14, m15);
  }

  /**
   * Creates and returns a Function that, when applied, creates a
   * {@link Septendecuple} from an initial object of type T by applying the given
   * mappers.
   *
   * @param <T>   type of the initial object to be used by the function to create
   *              a {@link Septendecuple }
   * @param <T0>  target type of m0
   * @param <T1>  target type of m1
   * @param <T2>  target type of m2
   * @param <T3>  target type of m3
   * @param <T4>  target type of m4
   * @param <T5>  target type of m5
   * @param <T6>  target type of m6
   * @param <T7>  target type of m7
   * @param <T8>  target type of m8
   * @param <T9>  target type of m9
   * @param <T10> target type of m10
   * @param <T11> target type of m11
   * @param <T12> target type of m12
   * @param <T13> target type of m13
   * @param <T14> target type of m14
   * @param <T15> target type of m15
   * @param <T16> target type of m16
   * @param m0    mapper to apply for Tuple17's element 0
   * @param m1    mapper to apply for Tuple17's element 1
   * @param m2    mapper to apply for Tuple17's element 2
   * @param m3    mapper to apply for Tuple17's element 3
   * @param m4    mapper to apply for Tuple17's element 4
   * @param m5    mapper to apply for Tuple17's element 5
   * @param m6    mapper to apply for Tuple17's element 6
   * @param m7    mapper to apply for Tuple17's element 7
   * @param m8    mapper to apply for Tuple17's element 8
   * @param m9    mapper to apply for Tuple17's element 9
   * @param m10   mapper to apply for Tuple17's element 10
   * @param m11   mapper to apply for Tuple17's element 11
   * @param m12   mapper to apply for Tuple17's element 12
   * @param m13   mapper to apply for Tuple17's element 13
   * @param m14   mapper to apply for Tuple17's element 14
   * @param m15   mapper to apply for Tuple17's element 15
   * @param m16   mapper to apply for Tuple17's element 16
   * @return a Function that, when applied, creates a {@link Septendecuple} from
   *         an initial object of type T by applying the given mappers.
   *
   * @see Septendecuple
   * @see Tuple
   */
  public static <T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> Function<T, Septendecuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> toTuple(
      Function<T, T0> m0, Function<T, T1> m1, Function<T, T2> m2, Function<T, T3> m3, Function<T, T4> m4,
      Function<T, T5> m5, Function<T, T6> m6, Function<T, T7> m7, Function<T, T8> m8, Function<T, T9> m9,
      Function<T, T10> m10, Function<T, T11> m11, Function<T, T12> m12, Function<T, T13> m13, Function<T, T14> m14,
      Function<T, T15> m15, Function<T, T16> m16) {
    return new Tuple17MapperImpl<>(m0, m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12, m13, m14, m15, m16);
  }

  /**
   * Creates and returns a Function that, when applied, creates a
   * {@link Octodecuple} from an initial object of type T by applying the given
   * mappers.
   *
   * @param <T>   type of the initial object to be used by the function to create
   *              a {@link Octodecuple }
   * @param <T0>  target type of m0
   * @param <T1>  target type of m1
   * @param <T2>  target type of m2
   * @param <T3>  target type of m3
   * @param <T4>  target type of m4
   * @param <T5>  target type of m5
   * @param <T6>  target type of m6
   * @param <T7>  target type of m7
   * @param <T8>  target type of m8
   * @param <T9>  target type of m9
   * @param <T10> target type of m10
   * @param <T11> target type of m11
   * @param <T12> target type of m12
   * @param <T13> target type of m13
   * @param <T14> target type of m14
   * @param <T15> target type of m15
   * @param <T16> target type of m16
   * @param <T17> target type of m17
   * @param m0    mapper to apply for Tuple18's element 0
   * @param m1    mapper to apply for Tuple18's element 1
   * @param m2    mapper to apply for Tuple18's element 2
   * @param m3    mapper to apply for Tuple18's element 3
   * @param m4    mapper to apply for Tuple18's element 4
   * @param m5    mapper to apply for Tuple18's element 5
   * @param m6    mapper to apply for Tuple18's element 6
   * @param m7    mapper to apply for Tuple18's element 7
   * @param m8    mapper to apply for Tuple18's element 8
   * @param m9    mapper to apply for Tuple18's element 9
   * @param m10   mapper to apply for Tuple18's element 10
   * @param m11   mapper to apply for Tuple18's element 11
   * @param m12   mapper to apply for Tuple18's element 12
   * @param m13   mapper to apply for Tuple18's element 13
   * @param m14   mapper to apply for Tuple18's element 14
   * @param m15   mapper to apply for Tuple18's element 15
   * @param m16   mapper to apply for Tuple18's element 16
   * @param m17   mapper to apply for Tuple18's element 17
   * @return a Function that, when applied, creates a {@link Octodecuple} from an
   *         initial object of type T by applying the given mappers.
   *
   * @see Octodecuple
   * @see Tuple
   */
  public static <T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> Function<T, Octodecuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> toTuple(
      Function<T, T0> m0, Function<T, T1> m1, Function<T, T2> m2, Function<T, T3> m3, Function<T, T4> m4,
      Function<T, T5> m5, Function<T, T6> m6, Function<T, T7> m7, Function<T, T8> m8, Function<T, T9> m9,
      Function<T, T10> m10, Function<T, T11> m11, Function<T, T12> m12, Function<T, T13> m13, Function<T, T14> m14,
      Function<T, T15> m15, Function<T, T16> m16, Function<T, T17> m17) {
    return new Tuple18MapperImpl<>(m0, m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12, m13, m14, m15, m16, m17);
  }

  /**
   * Creates and returns a Function that, when applied, creates a
   * {@link Novemdecuple} from an initial object of type T by applying the given
   * mappers.
   *
   * @param <T>   type of the initial object to be used by the function to create
   *              a {@link Novemdecuple }
   * @param <T0>  target type of m0
   * @param <T1>  target type of m1
   * @param <T2>  target type of m2
   * @param <T3>  target type of m3
   * @param <T4>  target type of m4
   * @param <T5>  target type of m5
   * @param <T6>  target type of m6
   * @param <T7>  target type of m7
   * @param <T8>  target type of m8
   * @param <T9>  target type of m9
   * @param <T10> target type of m10
   * @param <T11> target type of m11
   * @param <T12> target type of m12
   * @param <T13> target type of m13
   * @param <T14> target type of m14
   * @param <T15> target type of m15
   * @param <T16> target type of m16
   * @param <T17> target type of m17
   * @param <T18> target type of m18
   * @param m0    mapper to apply for Tuple19's element 0
   * @param m1    mapper to apply for Tuple19's element 1
   * @param m2    mapper to apply for Tuple19's element 2
   * @param m3    mapper to apply for Tuple19's element 3
   * @param m4    mapper to apply for Tuple19's element 4
   * @param m5    mapper to apply for Tuple19's element 5
   * @param m6    mapper to apply for Tuple19's element 6
   * @param m7    mapper to apply for Tuple19's element 7
   * @param m8    mapper to apply for Tuple19's element 8
   * @param m9    mapper to apply for Tuple19's element 9
   * @param m10   mapper to apply for Tuple19's element 10
   * @param m11   mapper to apply for Tuple19's element 11
   * @param m12   mapper to apply for Tuple19's element 12
   * @param m13   mapper to apply for Tuple19's element 13
   * @param m14   mapper to apply for Tuple19's element 14
   * @param m15   mapper to apply for Tuple19's element 15
   * @param m16   mapper to apply for Tuple19's element 16
   * @param m17   mapper to apply for Tuple19's element 17
   * @param m18   mapper to apply for Tuple19's element 18
   * @return a Function that, when applied, creates a {@link Novemdecuple} from an
   *         initial object of type T by applying the given mappers.
   *
   * @see Novemdecuple
   * @see Tuple
   */
  public static <T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> Function<T, Novemdecuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> toTuple(
      Function<T, T0> m0, Function<T, T1> m1, Function<T, T2> m2, Function<T, T3> m3, Function<T, T4> m4,
      Function<T, T5> m5, Function<T, T6> m6, Function<T, T7> m7, Function<T, T8> m8, Function<T, T9> m9,
      Function<T, T10> m10, Function<T, T11> m11, Function<T, T12> m12, Function<T, T13> m13, Function<T, T14> m14,
      Function<T, T15> m15, Function<T, T16> m16, Function<T, T17> m17, Function<T, T18> m18) {
    return new Tuple19MapperImpl<>(m0, m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12, m13, m14, m15, m16, m17, m18);
  }

  /**
   * Creates and returns a Function that, when applied, creates a
   * {@link Vigintuple} from an initial object of type T by applying the given
   * mappers.
   *
   * @param <T>   type of the initial object to be used by the function to create
   *              a {@link Vigintuple }
   * @param <T0>  target type of m0
   * @param <T1>  target type of m1
   * @param <T2>  target type of m2
   * @param <T3>  target type of m3
   * @param <T4>  target type of m4
   * @param <T5>  target type of m5
   * @param <T6>  target type of m6
   * @param <T7>  target type of m7
   * @param <T8>  target type of m8
   * @param <T9>  target type of m9
   * @param <T10> target type of m10
   * @param <T11> target type of m11
   * @param <T12> target type of m12
   * @param <T13> target type of m13
   * @param <T14> target type of m14
   * @param <T15> target type of m15
   * @param <T16> target type of m16
   * @param <T17> target type of m17
   * @param <T18> target type of m18
   * @param <T19> target type of m19
   * @param m0    mapper to apply for Tuple20's element 0
   * @param m1    mapper to apply for Tuple20's element 1
   * @param m2    mapper to apply for Tuple20's element 2
   * @param m3    mapper to apply for Tuple20's element 3
   * @param m4    mapper to apply for Tuple20's element 4
   * @param m5    mapper to apply for Tuple20's element 5
   * @param m6    mapper to apply for Tuple20's element 6
   * @param m7    mapper to apply for Tuple20's element 7
   * @param m8    mapper to apply for Tuple20's element 8
   * @param m9    mapper to apply for Tuple20's element 9
   * @param m10   mapper to apply for Tuple20's element 10
   * @param m11   mapper to apply for Tuple20's element 11
   * @param m12   mapper to apply for Tuple20's element 12
   * @param m13   mapper to apply for Tuple20's element 13
   * @param m14   mapper to apply for Tuple20's element 14
   * @param m15   mapper to apply for Tuple20's element 15
   * @param m16   mapper to apply for Tuple20's element 16
   * @param m17   mapper to apply for Tuple20's element 17
   * @param m18   mapper to apply for Tuple20's element 18
   * @param m19   mapper to apply for Tuple20's element 19
   * @return a Function that, when applied, creates a {@link Vigintuple} from an
   *         initial object of type T by applying the given mappers.
   *
   * @see Vigintuple
   * @see Tuple
   */
  public static <T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> Function<T, Vigintuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> toTuple(
      Function<T, T0> m0, Function<T, T1> m1, Function<T, T2> m2, Function<T, T3> m3, Function<T, T4> m4,
      Function<T, T5> m5, Function<T, T6> m6, Function<T, T7> m7, Function<T, T8> m8, Function<T, T9> m9,
      Function<T, T10> m10, Function<T, T11> m11, Function<T, T12> m12, Function<T, T13> m13, Function<T, T14> m14,
      Function<T, T15> m15, Function<T, T16> m16, Function<T, T17> m17, Function<T, T18> m18, Function<T, T19> m19) {
    return new Tuple20MapperImpl<>(m0, m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12, m13, m14, m15, m16, m17, m18,
        m19);
  }

}